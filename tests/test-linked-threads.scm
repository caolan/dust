(use test dust.linked-threads)

(test-group "linkee aborts"
  (let* ((t1 (make-thread (lambda ()
                            (thread-sleep! 0.1)
                            (abort 'example))
                          't1))
         (t2 (make-thread (lambda ()
                            (thread-link t1)
                            (let loop ()
                              (thread-sleep! 1)
                              (loop)))
                          't2)))
    (thread-start! t2)
    (thread-start! t1)
    (thread-sleep! 0.5)
    (test 'terminated (thread-state t1))
    (test 'terminated (thread-state t2))
    (test-error (thread-join! t1))
    (test-error (thread-join! t2))))

(test-group "linker aborts"
  (let* ((t1 (make-thread (lambda ()
                            (let loop ()
                              (thread-sleep! 1)
                              (loop)))
                          't1))
         (t2 (make-thread (lambda ()
                            (thread-link t1)
                            (thread-sleep! 0.1)
                            (abort 'example))
                          't2)))
    (thread-start! t2)
    (thread-start! t1)
    (thread-sleep! 0.5)
    (test 'terminated (thread-state t1))
    (test 'terminated (thread-state t2))
    (test-error (thread-join! t1))
    (test-error (thread-join! t2))))

(test-group "terminating a linked thread before it's started"
  (let* ((t1 (make-thread (lambda ()
                            (let loop ()
                              (thread-sleep! 1)
                              (loop)))))
         (t2 (make-thread (lambda ()
                            (thread-link t1)
                            (abort 'example)))))
    (thread-start! t2)
    (thread-yield!)
    (thread-start! t1)
    (thread-yield!)
    (test 'terminated (thread-state t1))
    (test 'terminated (thread-state t2))))

(test-group "handle thread-exit condition"
  (let* ((t1 (make-thread (lambda () (abort 'example))))
         (t2 (make-thread (lambda ()
                            (thread-link t1)
                            (thread-start! t1)
                            (let loop ()
                              (condition-case
                                  (let wait ()
                                    (thread-sleep! 1)
                                    (wait))
                                (exn (thread-exit)
                                     (printf "thread ~S exited with: ~S~n"
                                             (exited-thread exn)
                                             (exited-thread-exception exn))
                                     (loop))))))))
    (thread-start! t2)
    (thread-yield!)
    (thread-start! t1)
    (thread-yield!)
    (thread-sleep! 0.5)
    (test 'terminated (thread-state t1))
    (test-assert (not (eq? 'terminated (thread-state t2))))
    (thread-terminate! t2)))

(test-group "terminate linked thread"
  (let* ((t1 (make-thread (lambda ()
                            (let loop ()
                              (thread-sleep! 0.1)
                              (loop)))))
         (t2 (make-thread (lambda ()
                            (thread-link t1)
                            (let loop ()
                              (thread-sleep! 0.1)
                              (loop))))))
    (thread-start! t2)
    (thread-yield!)
    (thread-start! t1)
    (thread-yield!)
    (test-assert (not (eq? 'terminated (thread-state t1))))
    (test-assert (not (eq? 'terminated (thread-state t2))))
    (thread-terminate! t1)
    (thread-sleep! 0.5)
    (test 'terminated (thread-state t1))
    (test 'terminated (thread-state t2))))

(test-group "terminate linked thread (alternate thread)"
  (let* ((t1 (make-thread (lambda ()
                            (let loop ()
                              (thread-sleep! 0.1)
                              (loop)))))
         (t2 (make-thread (lambda ()
                            (thread-link t1)
                            (let loop ()
                              (thread-sleep! 0.1)
                              (loop))))))
    (thread-start! t2)
    (thread-yield!)
    (thread-start! t1)
    (thread-yield!)
    (test-assert (not (eq? 'terminated (thread-state t1))))
    (test-assert (not (eq? 'terminated (thread-state t2))))
    (thread-terminate! t2)
    (thread-sleep! 0.5)
    (test 'terminated (thread-state t1))
    (test 'terminated (thread-state t2))))

(test-group "thread monitoring"
  (let* ((example-exn 'example)
         (t1 (make-thread (lambda () (abort example-exn))))
         (t2 (make-thread (lambda ()
                            (thread-monitor t1)
                            (test `(thread-exit ,t1 ,example-exn)
                                  (thread-receive!))))))
    (thread-start! t2)
    (thread-yield!)
    (thread-start! t1)
    (thread-join! t2)
    (test 'terminated (thread-state t1))
    (test 'dead (thread-state t2))))

